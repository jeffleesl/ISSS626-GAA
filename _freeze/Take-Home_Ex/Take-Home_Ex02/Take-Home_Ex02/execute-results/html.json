{
  "hash": "c4520438465015815254e8877f265bb4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 2 : Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics\"\nauthor: \"Jeffrey Lee Shao Lin\"\ndate: \"September 27, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n# 1. Setting the Scene\n\nTourism is one of Thailand’s largest industries, accounting for some 20% of the gross domestic product (GDP). In 2019, Thailand earned 90 billion US\\$ from domestic and international tourism, but the COVID-19 pandemic caused revenues to crash to 24 billion US\\$ in 2020.\n\nFigure below shows the total revenue receipt from tourism sector from January 2019 until Feb 2023. The figure reveals that the revenue from tourism industry have been recovered gradually since September 2021.\n\n![](images/clipboard-378385426.png)\n\nHowever, it is important to note that the tourism economy of Thailand are not evenly distributed. Figure below reveals that the tourism economy of Thailand are mainly focus on five provinces, namely Bangkok, Phuket, Chiang Mai, Sukhothai and Phetchaburi.\n\n![](images/clipboard-986836251.png)\n\n# 2. Objectives\n\nAs a a curious geospatial analytics green horn, we are interested to discover:\n\n-   if the key indicators of tourism economy of Thailand are independent from space and space and time.\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\n# 3. The Task\n\nThe specific tasks of this take-home exercise are as follows:\n\nUsing appropriate function of sf and tidyverse, preparing the following geospatial data layer: a study area layer in sf polygon features. It must be at province level (including Bangkok) of Thailand. a tourism economy indicators layer within the study area in sf polygon features. a derived tourism economy indicator layer in spacetime s3 class of sfdep. Keep the time series at month and year levels. Using the extracted data, perform global spatial autocorrelation analysis by using sfdep methods. Using the extracted data, perform local spatial autocorrelation analysis by using sfdep methods. Using the extracted data, perform emerging hotspot analysis by using sfdep methods. Describe the spatial patterns revealed by the analysis above.\n\n# 4. The Data\n\nFor the purpose of this take-home exercise, two data sets shall be used, they are:\n\nThailand Domestic Tourism Statistics at Kaggle. You are required to use version 2 of the data set.\n\nThailand - Subnational Administrative Boundaries at HDX. You are required to use the province boundary data set.\n\n# 5. Importing Packages\n\nBefore we start the exercise, we will need to import necessary R packages first. We will use the following packages:\n\n-   [spNetwork](https://cran.r-project.org/web/packages/spNetwork/index.html), which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n\n-   [sf](https://r-spatial.github.io/sf/index.html) package provides functions to manage, processing, and manipulate **Simple Features**, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\n\n-   [**tmap**](https://cran.r-project.org/web/packages/tmap/index.html) which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using [leaflet](https://leafletjs.com/) API.\n\n-   [**sfdep**](https://cran.r-project.org/web/packages/sfdep/index.html) which provide functions for utilizes list columns extensively to make this interface possible.\n\n-   [**smoothr**](https://cran.r-project.org/web/packages/smoothr/index.html) which provide functions for smoothing and tidying spatial features (i.e. lines and polygons) to make them more aesthetically pleasing.\n\n-   [**lubridate**](https://cran.r-project.org/web/packages/lubridate/index.html) which provide functions to work with date-times and time-spans: fast and user friendly parsing of date-time data, extraction and updating of components of a date-time (years, months, days, hours, minutes, and seconds), algebraic manipulation on date-time and time-span objects.\n\n-   Use the code chunk below to install and launch the below R packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, sfdep, tmap, lubridate, tidyverse)\n```\n:::\n\n\n# 6. Getting the Data Into R Environment\n\nIn this section, we will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n## 6.1 Import shapefile into r environment\n\n### 6.1.1 Thailand Domestic Tourism Statistics\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_data <- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\") \n# Update with actual path\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(tourism_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 30,800\nColumns: 7\n$ date          <date> 2019-01-01, 2019-01-01, 2019-01-01, 2019-01-01, 2019-01…\n$ province_thai <chr> \"กรุงเทพมหานคร\", \"ลพบุรี\", \"พระนครศรีอยุธยา\", \"สระบุรี\", \"ชัยนาท…\n$ province_eng  <chr> \"Bangkok\", \"Lopburi\", \"Phra Nakhon Si Ayutthaya\", \"Sarab…\n$ region_thai   <chr> \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"ภาคกลาง\", \"…\n$ region_eng    <chr> \"central\", \"central\", \"central\", \"central\", \"central\", \"…\n$ variable      <chr> \"ratio_tourist_stay\", \"ratio_tourist_stay\", \"ratio_touri…\n$ value         <dbl> 93.37, 61.32, 73.37, 67.33, 79.31, 71.70, 64.65, 71.21, …\n```\n\n\n:::\n:::\n\n\nVariables:\n\n|                      |                                                                             |\n|------------------|------------------------------------------------------|\n| `no_tourist_all`     | The total number of domestic tourists who visited the province              |\n| `no_tourist_foreign` | The number of foreign tourists who visited the province                     |\n| `no_tourist_stay`    | The number of tourists who stay over-night                                  |\n| `no_tourist_thai`    | The number of Thai tourists who visited the province                        |\n| `ratio_tourist_stay` | The ratio of tourist stay over-night.                                       |\n| `revenue_all`        | The revenue generated by the tourism industry in the province, in Thai Baht |\n| `revenue_foreign`    | The revenue generated by foreign tourists in the province, in Thai Baht     |\n| `revenue_thai`       | The revenue generated by Thai tourists in the province, in Thai Baht        |\n\n#### 6.1.1.2 Reshape the Data\n\nUse pivot_wider to create new columns based on the variables in Column F, using Column G as the values.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_data_wide <- tourism_data %>%\n  pivot_wider(\n    names_from = variable,\n    values_from = value,\n    values_fill = NA  # Fill missing values with NA \n    ) \n\ntourism_data_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,850 × 13\n   date       province_thai province_eng             region_thai region_eng\n   <date>     <chr>         <chr>                    <chr>       <chr>     \n 1 2019-01-01 กรุงเทพมหานคร  Bangkok                  ภาคกลาง     central   \n 2 2019-01-01 ลพบุรี          Lopburi                  ภาคกลาง     central   \n 3 2019-01-01 พระนครศรีอยุธยา Phra Nakhon Si Ayutthaya ภาคกลาง     central   \n 4 2019-01-01 สระบุรี         Saraburi                 ภาคกลาง     central   \n 5 2019-01-01 ชัยนาท         Chainat                  ภาคกลาง     central   \n 6 2019-01-01 นครปฐม        Nakhon Pathom            ภาคกลาง     central   \n 7 2019-01-01 สิงห์บุรี         Sing Buri                ภาคกลาง     central   \n 8 2019-01-01 อ่างทอง        Ang Thong                ภาคกลาง     central   \n 9 2019-01-01 นนทบุรี         Nonthaburi               ภาคกลาง     central   \n10 2019-01-01 ปทุมธานี        Pathum Thani             ภาคกลาง     central   \n# ℹ 3,840 more rows\n# ℹ 8 more variables: ratio_tourist_stay <dbl>, no_tourist_stay <dbl>,\n#   no_tourist_all <dbl>, no_tourist_thai <dbl>, no_tourist_foreign <dbl>,\n#   revenue_all <dbl>, revenue_thai <dbl>, revenue_foreign <dbl>\n```\n\n\n:::\n:::\n\n\n#### 6.1.1.2 Select Relevant Columns\n\nAfter reshaping, select only the relevant columns for your analysis. Also, create new columns for month, month factor and month-year.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_data_new <- tourism_data_wide %>%\n  select(date, province_thai, province_eng, region_eng, \n         no_tourist_all, no_tourist_foreign, \n         no_tourist_stay, no_tourist_thai, \n         ratio_tourist_stay, revenue_all, \n         revenue_foreign, revenue_thai) %>% \n  mutate(\n    Month_num = month(date),  # Extract numeric month\n    Month_fac = month(date, label = TRUE, abbr = TRUE),  # Extract abbreviated month as factor\n    Month_year = paste0(Month_fac, \"-\", year(date))  # Create 'month-year' column\n  )\n\nprint(tourism_data_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,850 × 15\n   date       province_thai province_eng             region_eng no_tourist_all\n   <date>     <chr>         <chr>                    <chr>               <dbl>\n 1 2019-01-01 กรุงเทพมหานคร  Bangkok                  central           5959075\n 2 2019-01-01 ลพบุรี          Lopburi                  central            268664\n 3 2019-01-01 พระนครศรีอยุธยา Phra Nakhon Si Ayutthaya central            730329\n 4 2019-01-01 สระบุรี         Saraburi                 central            207236\n 5 2019-01-01 ชัยนาท         Chainat                  central             79073\n 6 2019-01-01 นครปฐม        Nakhon Pathom            central            296107\n 7 2019-01-01 สิงห์บุรี         Sing Buri                central             49438\n 8 2019-01-01 อ่างทอง        Ang Thong                central            104097\n 9 2019-01-01 นนทบุรี         Nonthaburi               central            323717\n10 2019-01-01 ปทุมธานี        Pathum Thani             central            233295\n# ℹ 3,840 more rows\n# ℹ 10 more variables: no_tourist_foreign <dbl>, no_tourist_stay <dbl>,\n#   no_tourist_thai <dbl>, ratio_tourist_stay <dbl>, revenue_all <dbl>,\n#   revenue_foreign <dbl>, revenue_thai <dbl>, Month_num <dbl>,\n#   Month_fac <ord>, Month_year <chr>\n```\n\n\n:::\n:::\n\n\n\n### 6.1.2 Thailand - Subnational Administrative Boundaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load province boundaries\n\nprovinces <- st_read(dsn = \"data/rawdata\", \n                layer = \"tha_admbnda_adm1_rtsd_20220121\") %>%\n  st_transform(crs = 32647)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\Users\\user\\OneDrive - Singapore Management University\\MITB\\6. Geospatial Analytics and Applications\\jeffleesl\\ISSS626-GAA\\Take-Home_Ex\\Take-Home_Ex02\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load province boundaries\n\nglimpse(provinces)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 77\nColumns: 17\n$ Shape_Leng <dbl> 2.417227, 1.695100, 1.251111, 1.884945, 3.041716, 1.739908,…\n$ Shape_Area <dbl> 0.13133873, 0.07926199, 0.05323766, 0.12698345, 0.21393797,…\n$ ADM1_EN    <chr> \"Bangkok\", \"Samut Prakan\", \"Nonthaburi\", \"Pathum Thani\", \"P…\n$ ADM1_TH    <chr> \"กรุงเทพมหานคร\", \"สมุทรปราการ\", \"นนทบุรี\", \"ปทุมธานี\", \"พระนครศรีอ…\n$ ADM1_PCODE <chr> \"TH10\", \"TH11\", \"TH12\", \"TH13\", \"TH14\", \"TH15\", \"TH16\", \"TH…\n$ ADM1_REF   <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT1TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1ALT2TH <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM0_EN    <chr> \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\", \"Thailand\",…\n$ ADM0_TH    <chr> \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศไทย\", \"ประเทศ…\n$ ADM0_PCODE <chr> \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\", \"TH\",…\n$ date       <date> 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18, 2019-02-18…\n$ validOn    <date> 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22, 2022-01-22…\n$ validTo    <date> -001-11-30, -001-11-30, -001-11-30, -001-11-30, -001-11-30…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((674339.8 15..., MULTIPOLYGON (…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load province boundaries\n\nprovinces <- provinces %>%\n  mutate(ADM1_EN = recode(ADM1_EN,\n    \"Lop Buri\" = \"Lopburi\",\n    \"Chai Nat\" = \"Chainat\",\n    \"Chon Buri\" = \"Chonburi\",\n    \"Prachin Buri\" = \"Prachinburi\",\n    \"Phangnga\" = \"Phang Nga\",\n    \"Buri Ram\" = \"Buriram\",\n    \"Si Sa Ket\" = \"Sisaket\",\n    \"Nong Bua Lam Phu\" = \"Nong Bua Lamphu\"\n  ))\n```\n:::\n\n\n\n## 6.2 Performing relational join\n\nThe code chunk below will be used to update the attribute table of *provinces*’ SpatialPolygonsDataFrame with the attribute fields of *tourismdatanew* dataframe. This is performed by using *left_join()* of **dplyr** package.\n\n### 6.2.1 Using Province in English\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left join to add geometries from thailand bundaries shapefile\ntourism_sf <- tourism_data_new %>%\n  left_join(provinces, by = c(\"province_eng\" = \"ADM1_EN\")) \n\n# Ensure the data is a valid sf object\ntourism_sf <- st_as_sf(tourism_sf)\n\n# Select specific columns (1:19, 25:28, and 31)\ntourism_sf <- tourism_sf %>%\n  select(1:19, 25:28, 31)\n\n# Check if transformation was successful\nst_crs(tourism_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:32647 \n  wkt:\nPROJCRS[\"WGS 84 / UTM zone 47N\",\n    BASEGEOGCRS[\"WGS 84\",\n        ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n            MEMBER[\"World Geodetic System 1984 (Transit)\"],\n            MEMBER[\"World Geodetic System 1984 (G730)\"],\n            MEMBER[\"World Geodetic System 1984 (G873)\"],\n            MEMBER[\"World Geodetic System 1984 (G1150)\"],\n            MEMBER[\"World Geodetic System 1984 (G1674)\"],\n            MEMBER[\"World Geodetic System 1984 (G1762)\"],\n            MEMBER[\"World Geodetic System 1984 (G2139)\"],\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ENSEMBLEACCURACY[2.0]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4326]],\n    CONVERSION[\"UTM zone 47N\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",99,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.9996,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",500000,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Navigation and medium accuracy spatial referencing.\"],\n        AREA[\"Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\"],\n        BBOX[0,96,84,102]],\n    ID[\"EPSG\",32647]]\n```\n\n\n:::\n:::\n\n\n### 6.2.2 Using Province in Thai (Showing Other Method)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Left join to add geometries from thailand bundaries shapefile\n# tourism_sf_th <- tourism_data_new %>%\n  # left_join(provinces, by = c(\"province_thai\" = \"ADM1_TH\"))\n\n# Ensure the data is a valid sf object\n#tourism_sf_th <- st_as_sf(tourism_sf_th)\n\n# Check if transformation was successful\n# st_crs(tourism_sf_th)\n```\n:::\n\n# 7.Derived Tourism Economy Indicator Layer\n\nIt is always a good practice to use set.seed() before performing simulation. This is to ensure that the computation is reproducible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n## 7.1 Plotting a choropleth map\n\nPlot a choropleth map showing the distribution of revenue generated by the tourism industry in the different province, in Thai Baht\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(tourism_sf) +\n  tm_fill(\"revenue_all\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"revenue_all\") +\n  tm_borders(col = \"grey\") +\n  tm_layout(main.title = \"Distribution of revenue generated by the tourism industry in the different province\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### 7.1.1 Calculate the Average Revenue for Each Province\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate the average revenue_all for each province\ntourism_sf_avg <- tourism_sf %>%\n  group_by(province_thai) %>%\n  summarize(average_revenue_all = mean(revenue_all, na.rm = TRUE))\n```\n:::\n\n\n### 7.1.2 Join the Average Revenue Back to the Spatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join the average revenue back to the spatial data\ntourism_sf_avg <- left_join(st_drop_geometry(tourism_sf), tourism_sf_avg, by = \"province_thai\")\ntourism_sf_avg <- st_as_sf(tourism_sf_avg)\n```\n:::\n\n\n### 7.1.3 Modify the Plot Code to Use average_revenue_all\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(tourism_sf_avg) +\n  tm_fill(\"average_revenue_all\",   # Use average revenue\n          style = \"quantile\",      # Use quantile classification\n          palette = \"Blues\",       # Choose color palette\n          title = \"Average Revenue (All)\") +\n  tm_borders(col = \"grey\") +\n  tm_layout(main.title = \"Average Revenue Generated by Tourism Industry in Different Provinces\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45,\n            legend.width = 0.35,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n## 7.2 Visualising Regional Development Indicator\n\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of the revenue by using qtm() of tmap package.\n\n### 7.2.1 Equal interval classification and Equal quantile classification\n\n\n::: {.cell}\n\n```{.r .cell-code}\nequal <- tm_shape(tourism_sf) +\n  tm_fill(\"revenue_all\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(tourism_sf) +\n  tm_fill(\"revenue_all\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n### 7.2.2 Equal interval classification Y2023 and Equal quantile classification Y2023\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism_sf_2023 <- tourism_sf %>%\n  filter(year(date.x) == 2023)\n\nequal_2023 <- tm_shape(tourism_sf_2023) +\n  tm_fill(\"revenue_all\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification Y2023\")\n\nquantile_2023 <- tm_shape(tourism_sf_2023) +\n  tm_fill(\"revenue_all\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification Y2023\")\n\ntmap_arrange(equal_2023, \n             quantile_2023, \n             asp=1, \n             ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-Home_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n# 8. Global Spatial Autocorrelation Analysis\n\n## 8.1 Step 1: Deriving Queen’s contiguity weights: sfdep methods\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#wm_q <- tourism_sf %>%\n  #mutate(nb = st_contiguity(geometry),\n         #wt = st_weights(nb,\n                         #style = \"W\"),\n         #.before = 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create weights for spatial autocorrelation\n#tourism_neighbors <- tourism_sf %>%\n  #st_contiguity()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create weights for spatial autocorrelation\n#tourism_neighbors <- tourism_sf %>%\n  #st_contiguity()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Global Moran's I for tourism data\n#global_moran_test <- tourism_sf %>%\n  #global_moran(variable = \"no_tourist_all\", nb = tourism_neighbors)\n\n# Print the results\n#global_moran_test\n```\n:::\n\n\n# 9. Local Spatial Autocorrelation Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Local Moran's I for tourism data\n#local_moran_test <- tourism_sf %>%\n  #local_moran(variable = \"no_tourist_all\", nb = tourism_neighbors)\n\n# Print the results\n#local_moran_test\n```\n:::\n\n\n# 10. Emerging Hotspot Analysis\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Emerging Hotspot Analysis (temporal data should be converted to spacetime class)\n#tourism_spacetime <- as_spacetime(tourism_sf, time_var = \"date\", geometry = \"geometry\")\n\n#hotspot_analysis <- tourism_spacetime %>%\n  #emerging_hotspot(variable = \"no_tourist_all\", nb = tourism_neighbors)\n\n# View the results\n#hotspot_analysis\n```\n:::\n\n\n# 11. Conclusion\n\n-   **Global Autocorrelation**: A significant positive Moran's I indicates clustering of high or low values.\n\n-   **Local Autocorrelation**: Identify specific provinces with high or low values using LISA results.\n\n-   **Hotspots**: Areas with high positive Gi\\* scores are emerging hotspots, while negative scores indicate cold spots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ggplot(data = tourism_monthly) +\n  #geom_sf(aes(fill = hotspot)) + \n  #theme_minimal() +\n  #labs(title = \"Emerging Hotspots in Thailand's Tourism Economy\")\n```\n:::\n\n\nThis framework allows us to explore spatial dependencies in Thailand's tourism economy effectively. Adjust paths and variable names according to your specific datasets.\n\nOutput is saved in rds format for future used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(tourism_sf,\"data/rds/tourism.rds\")\n```\n:::\n\n\nThe code chunk below will be used to import the save origin6_9.rds into R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_rds(\"data/rds/tourism.rds\")\n```\n:::\n",
    "supporting": [
      "Take-Home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}