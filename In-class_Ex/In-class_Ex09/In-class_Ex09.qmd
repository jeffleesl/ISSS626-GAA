---
title: "In-class Exercise 09: Modelling Geographical Accessibility"
author: "Jeffrey Lee Shao Lin"
date: "Oct 28 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true  #will not re-render all items
  message: false #no warning messages go out
---

# 1. Getting Started

```{r}
pacman::p_load(tmap, SpatialAcc, sf, 
               ggstatsplot, reshape2,
               tidyverse)
```

# 2. Count Number of Points within a Distance

To count number of point features (i.e. CHAS clinics) within 1km of another point features (i.e. eldercare centre).

-   Download *ELDERCARE* shapefile and *CHAS* kml file from data.gov.sg

-   Using the steps your learned in Hands-on Exercise 1, import *ELDERCARE* shapefile and *CHAS* kml file into R

## 2.1 The Code

ELDERCARE is in shapefile format, the code chunk below will be used:

```{r}
eldercare <- st_read(dsn = "data/geospatial", 
                     layer = "ELDERCARE") %>% 
  st_transform(crs = 3414)
```

The code chunk below is used to import kml file.

```{r}
CHAS <- st_read("data/rawdata/CHASClinics.kml") %>%
  st_transform(crs = 3414)
```

## 2.2 Buffering

Next, st_buffer() of sf package is used to create a buffer of 1km around each eldercare features

```{r}
buffer_1km <- st_buffer(eldercare, 
                        dist = 1000)
```

## 2.3 Visualising

The code chunk below is used to plot the newly created buffers and the CHAS clinics.

```{r}
tmap_mode("view")
tm_shape(buffer_1km) +
  tm_polygons() +
tm_shape(CHAS) +
  tm_dots()
```

## 2.4 Counting points

Lastly, the code chunk below is used to count the number of CHAS clinics with 1km of each eldercare centre.

```{r}
buffer_1km$pts_count <- lengths(
  st_intersects(buffer_1km, CHAS))
```

# 3. Importing Data

## 3.1 Geospatial Data

```{r}
mpsz <- st_read(dsn = "data/geospatial", 
                layer = "MP14_SUBZONE_NO_SEA_PL") %>% 
  st_transform(crs = 3414)

hexagons <- st_read(dsn = "data/geospatial", 
                    layer = "hexagons") %>% 
  st_transform(crs = 3414)

eldercare <- st_read(dsn = "data/geospatial", 
                     layer = "ELDERCARE") %>% 
  st_transform(crs = 3414)

```

## 3.2 OD Matrix

```{r}
ODMatrix <- read_csv("data/aspatial/OD_Matrix.csv", 
                     skip = 0)

# entry = the entry point
# network = distance from the start to the end
# exit = the exit point
```

# 4. Data Cleaning and Updating Attributes

## 4.1 Supply

```{r}
eldercare <- eldercare %>%
  select(fid, ADDRESSPOS) %>%
  mutate(capacity = 100)
```

## 4.2 Demand

```{r}
hexagons <- hexagons %>%
  select(fid) %>%
  mutate(demand = 100)
```

## 4.3 OD Matrix

```{r}
distmat <- ODMatrix %>%
  select(origin_id, destination_id, total_cost) %>%
  spread(destination_id, total_cost)%>%
  select(c(-c('origin_id')))
```

```{r}
distmat_km <- as.matrix(distmat/1000)
```

# 5. Computing Handsen's Accessibility

## 5.1 The base code

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50, set to constraints
                            power = 2, 
                            family = "Hansen"))
```

## 5.2 Tidy the output

```{r}
colnames(acc_Hansen) <- "accHansen"

# acc_Hansen <- tbl_df(acc_Hansen)
acc_Hansen <- as_tibble(acc_Hansen)

hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

## 5.3 Combine code chunk

```{r, eval = FALSE}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 0.5, 
                            family = "Hansen"))

colnames(acc_Hansen) <- "accHansen"
# acc_Hansen <- tbl_df(acc_Hansen)
# acc_Hansen <- tibble::as_tibble(acc_Hansen)
acc_Hansen <- as_tibble(acc_Hansen)

hexagon_Hansen <- bind_cols(hexagons, acc_Hansen)
```

# 6. Visualising Accessibility

## 6.1 The Code

```{r}
mapex <- st_bbox(hexagons)

tmap_mode("plot")
tm_shape(hexagon_Hansen,
         bbox = mapex) + 
  tm_fill(col = "accHansen",
          n = 10,
          style = "quantile",
          border.col = "black",
          border.lwd = 1) +
tm_shape(eldercare) +
  tm_symbols(size = 0.1) +
  tm_layout(main.title = "Accessibility to eldercare: Hansen method",
            main.title.position = "center",
            main.title.size = 2,
            legend.outside = FALSE,
            legend.height = 0.45, 
            legend.width = 3.0,
            legend.format = list(digits = 6),
            legend.position = c("right", "top"),
            frame = TRUE) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.5)
```

## 6.2 Statistical graphic

```{r}
hexagon_Hansen <- st_join(hexagon_Hansen, mpsz, 
                          join = st_intersects)
```

```{r}
ggbetweenstats(
  data = hexagon_Hansen,
  x = REGION_N,
  y = accHansen,
  type = "p")
```
